{
	"info": {
		"_postman_id": "adc51449-c8a9-4466-9391-b28f160010c5",
		"name": "Gravitee.io - AM - SCIM",
		"description": "Test System for Cross-domain Identity Management\nSCIM 2.0 is released as RFC7642, RFC7643 and RFC7644",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dfcf876-f7b9-4bd5-a613-5081bdcf48c8",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create scim domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc5c0d6d-4396-4584-a4ec-b94555309588",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"scim-domain\", \n\t\"description\": \"test System for Cross-domain Identity Management specifications\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74b91973-e50c-45b8-bcc7-cd67494596f0",
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "daa4ea5b-b7e6-4d1b-a915-50e6c5fa1e51",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domain}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SCIM",
			"item": [
				{
					"name": "Case - non SCIM domain",
					"item": [
						{
							"name": "Fetch Service Provider Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c53f8498-2f23-4adb-bbc6-69f41f5aea15",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/ServiceProviderConfig",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"ServiceProviderConfig"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Users endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8f7c944-dcfc-4d9d-ae33-50190d95afbe",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Groups endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14399819-3953-4e6a-b8b6-e47ee7964a0e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configure domain",
					"item": [
						{
							"name": "Configure SCIM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb19af6e-d4bb-4175-bba2-6a26ddddb2c8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SCIM enabled for domain\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scim.enabled).to.eql(true);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scim\": {\n    \"enabled\": true\n  }\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Service Provider Configuration",
					"item": [
						{
							"name": "Fetch Service Provider Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76b8a01e-8601-4208-b26e-134ca016ae6f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check SCIM configuration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig']);",
											"    pm.expect(jsonData.patch.supported).to.eql(false);",
											"    pm.expect(jsonData.bulk.supported).to.eql(false);",
											"    pm.expect(jsonData.filter.supported).to.eql(false);",
											"    pm.expect(jsonData.changePassword.supported).to.eql(false);",
											"    pm.expect(jsonData.sort.supported).to.eql(false);",
											"    pm.expect(jsonData.etag.supported).to.eql(false);",
											"    pm.expect(jsonData.authenticationSchemes[0].type).to.eql('oauthbearertoken');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/ServiceProviderConfig",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"ServiceProviderConfig"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - invalid token",
					"item": [
						{
							"name": "Fetch Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9c4f550-8f7e-4250-8a98-157b1142ce9c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "452ba5d3-3409-438a-b7fd-22ec9f93814e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4a8ab7c-aa71-4aed-9e28-7c51a14f40bc",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "562cae06-8a00-4d89-88e4-ce1fafe1d197",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "719db40a-2330-460e-af68-00a8078a87f6",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12f3700a-2b5a-4cea-aed8-207ce5c2701e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9069ae84-f7b9-420c-8f91-b4a36ddc6837",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05778014-f333-440b-8e8f-5781f159d322",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57c9def2-9208-48e7-bacd-4eb60872eb34",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7313b01e-b8d5-4355-a3cf-7eb9fa975d22",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21667bdb-0b40-40e7-9c9a-6eb9faebb1ae",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4241935-ae71-40d4-83ac-822080b8a450",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ecea598-d840-4dd8-af37-1943f98f9d89",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5d4a232-0895-422d-aac8-3bc67da10548",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f8ca923-4eb7-4180-ad77-50c1cd0b7926",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c94970a-49ef-4667-b1e0-8d5fcd5702da",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configure client",
					"item": [
						{
							"name": "Create SCIM client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb384d65-f97d-472f-aff3-29a9fc6b2a07",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('clientSCIM', body.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": \"client-scim\",\n  \"clientSecret\": \"client-scim-secret\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/clients",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure SCIM client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "494c118a-a0ba-492c-a4b5-10bb2b12d682",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 6000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authorizedGrantTypes\": [\"client_credentials\"],\n  \"scopes\" : [\"scim\"]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/clients/{{clientSCIM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"clients",
										"{{clientSCIM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d65e443-124c-40a0-b1be-dadd758b616d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "802b16e1-a8a7-4721-8adc-a2dc0da461bf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic Y2xpZW50LXNjaW06Y2xpZW50LXNjaW0tc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f58f7b5a-b2e0-4f81-a103-5e7b532c5971",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create user malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - userName required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fa6e8fc-2884-4628-a2c3-be562146548f",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create userName field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Field [userName] is required\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - userName invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8aba6653-50c1-4ea2-8479-2abc444f8673",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create userName field invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Username [&Invalid] is not a valid value\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"userName\": \"&Invalid\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - familyName invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a310cec-3a93-4129-872d-1738bd57d396",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create familyName field invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Last name [#Invalid] is not a valid value\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"userName\": \"bjensen@example.com\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"#Invalid\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - givenName invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2af6c82d-dc43-4121-8c6e-08214606ec85",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create givenName field invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"First name [#Invalid] is not a valid value\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"userName\": \"bjensen@example.com\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\": \"Jensen\",\n       \"givenName\":\"#Invalid\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "579316fc-56ce-4757-bfe8-481c53593a73",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create givenName field invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Value [#Invalid] is not a valid email.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"userName\": \"bjensen@example.com\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\": \"Jensen\",\n       \"givenName\": \"Barbara\"\n     },\n     \"emails\": [\n\t    {\n\t      \"value\": \"#Invalid\",\n\t      \"type\": \"work\",\n\t      \"primary\": true\n\t    }\n\t  ]\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "295791aa-4cef-4675-961e-b170ce63d893",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"SCIM create user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:User']);",
													"    pm.environment.set('userSCIM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n  \"externalId\": \"701984\",\n  \"userName\": \"bjensen@example.com\",\n  \"name\": {\n    \"formatted\": \"Ms. Barbara J Jensen, III\",\n    \"familyName\": \"Jensen\",\n    \"givenName\": \"Barbara\",\n    \"middleName\": \"Jane\",\n    \"honorificPrefix\": \"Ms.\",\n    \"honorificSuffix\": \"III\"\n  },\n  \"displayName\": \"Babs Jensen\",\n  \"nickName\": \"Babs\",\n  \"profileUrl\": \"https://login.example.com/bjensen\",\n  \"emails\": [\n    {\n      \"value\": \"bjensen@example.com\",\n      \"type\": \"work\",\n      \"primary\": true\n    },\n    {\n      \"value\": \"babs@jensen.org\",\n      \"type\": \"home\"\n    }\n  ],\n  \"addresses\": [\n    {\n      \"type\": \"work\",\n      \"streetAddress\": \"100 Universal City Plaza\",\n      \"locality\": \"Hollywood\",\n      \"region\": \"CA\",\n      \"postalCode\": \"91608\",\n      \"country\": \"USA\",\n      \"formatted\": \"100 Universal City Plaza\\nHollywood, CA 91608 USA\",\n      \"primary\": true\n    },\n    {\n      \"type\": \"home\",\n      \"streetAddress\": \"456 Hollywood Blvd\",\n      \"locality\": \"Hollywood\",\n      \"region\": \"CA\",\n      \"postalCode\": \"91608\",\n      \"country\": \"USA\",\n      \"formatted\": \"456 Hollywood Blvd\\nHollywood, CA 91608 USA\"\n    }\n  ],\n  \"phoneNumbers\": [\n    {\n      \"value\": \"555-555-5555\",\n      \"type\": \"work\"\n    },\n    {\n      \"value\": \"555-555-4444\",\n      \"type\": \"mobile\"\n    }\n  ],\n  \"ims\": [\n    {\n      \"value\": \"someaimhandle\",\n      \"type\": \"aim\"\n    }\n  ],\n  \"photos\": [\n    {\n      \"value\":\n        \"https://photos.example.com/profilephoto/72930000000Ccne/F\",\n      \"type\": \"photo\"\n    },\n    {\n      \"value\":\n        \"https://photos.example.com/profilephoto/72930000000Ccne/T\",\n      \"type\": \"thumbnail\"\n    }\n  ],\n  \"userType\": \"Employee\",\n  \"title\": \"Tour Guide\",\n  \"preferredLanguage\": \"en-US\",\n  \"locale\": \"en-US\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"active\":true,\n  \"x509Certificates\": [\n    {\n      \"value\":\n       \"MIIDQzCCAqygAwIBAgICEAAwDQ....1UEBhMCVVMx\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - userName already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b78bce8-c2da-4155-aa7c-2e92186116f9",
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"SCIM create user uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"409\");",
													"    pm.expect(jsonData.scimType).to.eql(\"uniqueness\");",
													"    pm.expect(jsonData.detail).to.eql(\"User with username [bjensen@example.com] already exists\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"userName\":\"bjensen@example.com\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51f82670-ce5f-4332-88fc-7f94f01e2b88",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM update user unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"User [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"userName\":\"bjensen\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "423e57ff-3271-4738-8c04-5e1552686923",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM update user malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users/{{userSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users",
												"{{userSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e4629cc-c797-4820-8fee-02d95af0fbb2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM update user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:User']);",
													"    pm.expect(jsonData.name.familyName).to.eql('Jensen2');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"userName\":\"bjensen\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen2\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users/{{userSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users",
												"{{userSCIM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73f5406c-afdc-4127-bb34-f98bd38f2540",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// 2 users (one from SCIM and an other from inline idp)",
													"pm.test(\"SCIM list users\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(1);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(1);",
													"    pm.expect(jsonData.Resources.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Invalid request - user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "370ba785-dea5-4809-8cb2-00c91d0c2f92",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM delete user unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"User [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b741b970-caf1-4d1e-bc9a-4a8a2fbcaf38",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users/{{userSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users",
												"{{userSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74f8fcbb-1d27-41ec-a6e9-f9e4884fe5ee",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list users after delete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(0);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(0);",
													"    pm.expect(jsonData.Resources.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61cf0482-1c53-46ea-b0c5-30864c79d02a",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create group malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - displayName required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dee423fa-70a0-4014-a8eb-c40d5c281780",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM group displayName field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Field [displayName] is required\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"]\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "769e8452-b0a6-4b82-a794-06b14bc675e3",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"SCIM create user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:Group']);",
													"    pm.environment.set('groupSCIM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - displayName already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2aa651a-581d-46f6-9e29-f3cb5f33085a",
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"SCIM create group uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"409\");",
													"    pm.expect(jsonData.scimType).to.eql(\"uniqueness\");",
													"    pm.expect(jsonData.detail).to.eql(\"Group with display name [Tour Guides] already exists\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c886a2f-c322-4ac5-85b1-dac15b0814ea",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM update user unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"Group [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides 2\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d091744c-01bb-4776-829f-b4176dd279c1",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM update user malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups/{{groupSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups",
												"{{groupSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "072058cf-dc72-4d48-8dec-8af94ed6546a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM update user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:Group']);",
													"    pm.expect(jsonData.displayName).to.eql('Tour Guides 2');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides 2\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups/{{groupSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups",
												"{{groupSCIM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05fecee1-acc7-4765-b027-2e42cf043d25",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list groups\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(1);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(1);",
													"    pm.expect(jsonData.Resources.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ade713b-c009-4ac7-9112-32b6de7313da",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM delete group unknown group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"Group [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa910be6-a752-412f-8378-6e960c95a471",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups/{{groupSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups",
												"{{groupSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddd7d501-764f-4c1d-922f-362989bd3bf8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list groups after delete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(0);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(0);",
													"    pm.expect(jsonData.Resources.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ec075a8-33a9-48fb-b4cb-5f19d2c4ca73",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}